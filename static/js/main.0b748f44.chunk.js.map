{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["CForm","props","updateMainState","name","value","onUpdateStateValue","handleFormChange","event","target","setState","replaceMissingChars","cardNumber","cardNumberTmp","split","cardNumberArr","maskedCardNumber","forEach","val","index","push","join","onCardNumberChange","replace","test","trimRight","onCvvFocus","onCvvBlur","currentYear","Date","getFullYear","state","cardMonth","cardYear","monthsArr","Array","from","x","i","month","yearsArr","this","cardNumberRef","current","selectionStart","prevProps","prevState","cursorIdx","node","cardNum","prevCardNum","length","selectionEnd","cardHolderRef","cardDateRef","cardCvvRef","onCardInputFocus","onCardInputBlur","className","children","htmlFor","type","autoComplete","onChange","maxLength","ref","onFocus","e","onBlur","disabled","map","key","Component","CARDS","visa","amex","mastercard","discover","unionpay","troy","Card","cardType","re","number","Object","entries","card","pattern","RegExp","match","cardBackgroundName","random","Math","floor","removeEmptySpaces","shouldMaskNumber","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","backgroundImgname","style","counter","currentFocusedElm","cardHolder","cardCvv","isCardFlipped","onCardElementClick","cardHolderArr","maskCardNumber","alt","src","process","onClick","TransitionGroup","component","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","MainScreen","initialState","useState","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"mUAkPeA,E,kDA/OX,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IAeVC,gBAAkB,SAACC,EAAMC,GACrB,EAAKH,MAAMI,mBAAmB,CAC1BF,OACAC,WAnBW,EAuBnBE,iBAAmB,SAAAC,GAAU,IAAD,EACAA,EAAMC,OAAtBL,EADgB,EAChBA,KAAMC,EADU,EACVA,MAEd,EAAKK,SAAL,eAAiBN,EAAOC,IACxB,EAAKF,gBAAgBC,EAAMC,IA3BZ,EA8BnBM,oBAAsB,SAAAC,GAClB,IAAIC,EAAgB,sBACpBA,EAAgBA,EAAcC,MAAM,IACpC,IAAIC,EAAgBH,EAAWE,MAAM,IAEjCE,EAAmB,GAOvB,OANAH,EAAcI,SAAQ,SAACC,EAAKC,GACxBJ,EAAcI,GACRH,EAAiBI,KAAKL,EAAcI,IACpCH,EAAiBI,KAAKF,MAGzBF,EAAiBK,KAAK,KA1Cd,EA6CnBC,mBAAqB,SAAAd,GAAU,IAAD,EACJA,EAAMC,OAAtBJ,EADoB,EACpBA,MAAOD,EADa,EACbA,KACTQ,EAAaP,EACjBA,EAAQA,EAAMkB,QAAQ,MAAO,IACzB,kBAAkBC,KAAKnB,IAIhB,+BAA+BmB,KAAKnB,GAH3CO,EAAaP,EACRkB,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UAMzB,aAAaC,KAAKnB,KAEzBO,EAAaP,EACRkB,QAAQ,UAAW,OACnBA,QAAQ,kBAAmB,UAC3BA,QAAQ,0BAA2B,cAG5C,EAAKb,SAAL,eAAiBN,EAAOQ,EAAWa,cACnC,EAAKtB,gBAAgBC,EAAMQ,IAnEZ,EAsEnBc,WAAa,SAAAlB,GACT,EAAKL,gBAAgB,iBAAiB,IAvEvB,EA0EnBwB,UAAY,SAAAnB,GACR,EAAKL,gBAAgB,iBAAiB,IAxEtC,IAAMyB,GAAc,IAAIC,MAAOC,cAHhB,OAIf,EAAKC,MAAQ,CACTnB,WAAY,GACZoB,UAAW,GACXC,SAAU,GACVC,UAAWC,MAAMC,KAAK,IAAID,MAAM,KAAK,SAACE,EAAGC,GACrC,IAAMC,EAAQD,EAAI,EAClB,OAAOC,GAAS,EAAI,IAAMA,EAAQA,KAEtCC,SAAUL,MAAMC,KAAK,IAAID,MAAM,IAAI,SAACE,EAAGC,GAAJ,OAAUV,EAAcU,MAZhD,E,sEA+EjB,OAAOG,KAAKvC,MAAMwC,cAAcC,QAAQC,iB,yCAcvBC,EAAWC,EAAWC,GACvC,IAAMC,EAAOP,KAAKvC,MAAMwC,cAAcC,QAClBM,EAAYR,KAAKV,MAA7BnB,WACYsC,EAAgBJ,EAA5BlC,WAENqC,EAAQE,OAASD,EAAYC,QACF,MAA3BF,EAAQF,EAAY,GAEpBA,GAAa,EAC2B,MAA/BG,EAAYH,EAAY,KACjCA,GAAa,GAEfC,EAAKJ,eAAiBI,EAAKI,aAAeL,I,+BAGlC,IAAD,EACgDN,KAAKV,MAAlDC,EADH,EACGA,UAAWC,EADd,EACcA,SAAUC,EADxB,EACwBA,UAAWM,EADnC,EACmCA,SADnC,EASDC,KAAKvC,MANLwC,EAHC,EAGDA,cACAW,EAJC,EAIDA,cACAC,EALC,EAKDA,YACAC,EANC,EAMDA,WACAC,EAPC,EAODA,iBACAC,EARC,EAQDA,gBAEJ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,aAAajB,KAAKvC,MAAMyD,UACvC,yBAAKD,UAAU,oBACX,yBAAKA,UAAU,cACX,2BACIE,QAAQ,aACRF,UAAU,qBAFd,eAMA,2BACIG,KAAK,MACLzD,KAAK,aACLsD,UAAU,oBACVI,aAAa,MACbC,SAAUtB,KAAKnB,mBACf0C,UAAU,KACVC,IAAKvB,EACLwB,QAAS,SAAAC,GAAC,OAAIX,EAAiBW,EAAG,eAClCC,OAAQX,EACRpD,MAAOoC,KAAKV,MAAMnB,cAI1B,yBAAK8C,UAAU,cACX,2BAAOE,QAAQ,WAAWF,UAAU,qBAApC,eAGA,2BACIG,KAAK,OACLH,UAAU,oBACVI,aAAa,MACb1D,KAAK,aACL2D,SAAUtB,KAAKlC,iBACf0D,IAAKZ,EACLa,QAAS,SAAAC,GAAC,OAAIX,EAAiBW,EAAG,eAClCC,OAAQX,KAIhB,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,oBACX,2BACIE,QAAQ,YACRF,UAAU,qBAFd,mBAMA,4BACIA,UAAU,4BACVrD,MAAO2B,EACP5B,KAAK,YACL2D,SAAUtB,KAAKlC,iBACf0D,IAAKX,EACLY,QAAS,SAAAC,GAAC,OACNX,EAAiBW,EAAG,aAExBC,OAAQX,GAER,4BAAQpD,MAAM,GAAGgE,UAAQ,GAAzB,SAICnC,EAAUoC,KAAI,SAACpD,EAAKC,GAAN,OACX,4BAAQoD,IAAKpD,EAAOd,MAAOa,GACtBA,OAIb,4BACId,KAAK,WACLsD,UAAU,4BACVrD,MAAO4B,EACP8B,SAAUtB,KAAKlC,iBACf2D,QAAS,SAAAC,GAAC,OACNX,EAAiBW,EAAG,aAExBC,OAAQX,GAER,4BAAQpD,MAAM,GAAGgE,UAAQ,GAAzB,QAIC7B,EAAS8B,KAAI,SAACpD,EAAKC,GAAN,OACV,4BAAQoD,IAAKpD,EAAOd,MAAOa,GACtBA,SAMrB,yBAAKwC,UAAU,uBACX,yBAAKA,UAAU,cACX,2BACIE,QAAQ,UACRF,UAAU,qBAFd,OAMA,2BACIG,KAAK,MACLH,UAAU,oBACVM,UAAU,IACVF,aAAa,MACb1D,KAAK,UACL2D,SAAUtB,KAAKlC,iBACf2D,QAASzB,KAAKf,WACd0C,OAAQ3B,KAAKd,UACbsC,IAAKV,a,GArOrBiB,a,wBCMdC,G,MAAQ,CACVC,KAAM,KACNC,KAAM,WACNC,WAAY,UACZC,SAAU,QACVC,SAAU,MACVC,KAAM,UAgTKC,E,kDA5SX,aAAe,IAAD,uBACV,gBAUJC,SAAW,WAGP,IAFA,IACIC,EADEC,EAAS,EAAKjF,MAAMU,WAE1B,MAA8BwE,OAAOC,QAAQZ,GAA7C,eAAqD,CAAC,IAAD,sBAAzCa,EAAyC,KAAnCC,EAAmC,KAEjD,GADAL,EAAK,IAAIM,OAAOD,GACQ,MAApBJ,EAAOM,MAAMP,GACb,OAAOI,EAIf,MAAO,QArBG,EAwBdI,mBAAqB,WACjB,IAAIC,EAASC,KAAKC,MAAsB,GAAhBD,KAAKD,SAAgB,GAC7C,MAAM,GAAN,OAAUA,EAAV,UA1BU,EA6BdG,kBAAoB,SAAAlF,GAChB,OAAOA,EAAWW,QAAQ,OAAQ,KA9BxB,EAiCdwE,iBAAmB,SAACnF,EAAYO,GAC5B,OAA0B,KAAtBP,EAAWuC,OACJhC,EAAQ,GAAKA,EAAQ,GAErBA,EAAQ,GAAKA,EAAQ,IArCtB,EAyCd6E,oBAAsB,SAAAC,GAAO,OAAIA,EAC3B,CACEC,MAAM,GAAD,OAAKD,EAAQE,YAAb,MACLC,OAAO,GAAD,OAAKH,EAAQI,aAAb,MACNC,UAAU,cAAD,OAAgBL,EAAQM,WAAxB,0BAAoDN,EAAQO,UAA5D,QAEX,MA5CF,IAAMC,EAAoB,EAAKf,qBAHrB,OAIV,EAAK3D,MAAQ,CACT2E,MAAO,GACPC,QAAS,EACTF,kBAAmBA,GAPb,E,+DAiDK5D,GAAY,IACnB+D,EAAsBnE,KAAKvC,MAA3B0G,kBACR,GACIA,GACAA,IAAsB/D,EAAU+D,kBAClC,CACE,IAAMF,EAAQjE,KAAKuD,oBAAoBY,GACvCnE,KAAK/B,SAAS,CAAEgG,a,qCAIT9F,GACX,IAAIG,EAAgBH,EAAWE,MAAM,IASrC,OARAC,EAAcE,SAAQ,SAACC,EAAKC,GACpBA,EAAQ,GAAKA,EAAQ,IACQ,MAAzBJ,EAAcI,KACdJ,EAAcI,GAAS,QAK5BJ,I,+BAGD,IAAD,EAaD0B,KAAKvC,MAXL2G,EAFC,EAEDA,WACAjG,EAHC,EAGDA,WACAoB,EAJC,EAIDA,UACAC,EALC,EAKDA,SACA6E,EANC,EAMDA,QACAC,EAPC,EAODA,cACAH,EARC,EAQDA,kBACAI,EATC,EASDA,mBACAtE,EAVC,EAUDA,cACAW,EAXC,EAWDA,cACAC,EAZC,EAYDA,YAGE2D,EAAgBJ,EAAW/F,MAAM,IACjCC,EAAgB0B,KAAKyE,eAAetG,GAG1C,OAFAkG,EAAUA,EAAQhG,MAAM,IAGpB,yBAAK4C,UAAW,cAAgBqD,EAAgB,UAAY,KACxD,yBAAKrD,UAAU,0BACX,yBACIA,UAAS,2BACLkD,EAAiB,cAErBF,MAAOjE,KAAKV,MAAM2E,QAEtB,yBAAKhD,UAAU,oBACX,yBACIyD,IAAI,GACJC,IACIC,IAAA,2BACoB5E,KAAKV,MAAM0E,mBAEnC/C,UAAU,mBAIlB,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,kBACX,yBACI0D,IAAKC,aACLF,IAAI,GACJzD,UAAU,oBAEd,yBAAKA,UAAU,mBACX,yBACIyD,IAAK1E,KAAKwC,WACVmC,IACIC,IAAA,qBACc5E,KAAKwC,WADnB,QAGJvB,UAAU,yBAKtB,2BACIA,UAAU,oBACVO,IAAKvB,EACL4E,QAAS,kBAAMN,EAAmB,gBAElC,kBAACO,EAAA,EAAD,CACI7D,UAAU,gBACV8D,UAAU,OAET5G,EACGG,EAAcuD,KAAI,SAACpD,EAAKC,GAAN,OACd,kBAACsG,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTpD,IAAKpD,GAEL,yBAAKuC,UAAU,yBACVxC,OAKb,kBAACuG,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,yBAAKjE,UAAU,yBAAf,QAOhB,yBAAKA,UAAU,sBACX,2BACIA,UAAU,kBACV4D,QAAS,kBAAMN,EAAmB,eAClC/C,IAAKZ,GAEL,yBAAKK,UAAU,qBAAf,eAGA,yBAAKA,UAAU,mBACX,kBAAC6D,EAAA,EAAD,CACI7D,UAAU,gBACV8D,UAAU,OAEM,cAAfX,EACG,kBAACY,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,KAET,2CAGJV,EAAc3C,KAAI,SAACpD,EAAKC,GAAN,OACd,kBAACsG,EAAA,EAAD,CACIE,QAAS,IACTD,WAAW,mBACXnD,IAAKpD,GAEL,0BAAMuC,UAAU,uBACXxC,UAQ7B,yBACIwC,UAAU,kBACV4D,QAAS,kBAAMN,EAAmB,aAClC/C,IAAKX,GAEL,2BAAOI,UAAU,wBAAjB,WAGA,2BAAOA,UAAU,uBACb,kBAACkE,EAAA,EAAD,CAAkBC,UAAA,GACZ7F,EASE,kBAACyF,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTpD,IAAKvC,GAEL,8BAAOA,IAbX,kBAACyF,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTpD,IAAKvC,GAEL,uCAhBpB,IA8BI,2BACI4B,QAAQ,WACRF,UAAU,uBAEV,kBAACkE,EAAA,EAAD,CAAkBE,UAAA,GACZ7F,EASE,kBAACwF,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTpD,IAAKtC,GAEL,8BACKA,EACI8F,WACAC,QAAQ,KAhBrB,kBAACP,EAAA,EAAD,CACIC,WAAW,gBACXC,QAAS,IACTpD,IAAKtC,GAEL,2CAsBhC,yBAAKyB,UAAU,yBACX,yBAAKA,UAAU,oBACX,yBACIyD,IAAI,GACJC,IACIC,IAAA,2BACoB5E,KAAKV,MAAM0E,mBAEnC/C,UAAU,mBAGlB,yBAAKA,UAAU,oBACf,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,uBAAf,OACA,yBAAKA,UAAU,sBACVoD,EAAQxC,KAAI,SAACpD,EAAKC,GAAN,OACT,0BAAMoD,IAAKpD,GAAX,SAGR,yBAAKuC,UAAU,mBACX,yBACIyD,IAAI,YACJC,IACIC,uBAGJ3D,UAAU,+B,GAnSvBc,aC2FJyD,EAlGI,WACf,IAAMC,EAAe,CACjBtH,WARc,sBASdiG,WARsB,YAStB7E,UARiB,GASjBC,SARgB,GAShB6E,QARe,GASfC,eAAe,EACfH,kBAAmB,MARF,EAUKuB,mBAASD,GAVd,mBAUdnG,EAVc,KAUPrB,EAVO,KAoBjBE,EAMAmB,EANAnB,WACAiG,EAKA9E,EALA8E,WACA7E,EAIAD,EAJAC,UACAC,EAGAF,EAHAE,SACA6E,EAEA/E,EAFA+E,QACAC,EACAhF,EADAgF,cAEEH,EAAsB7E,EAAtB6E,kBAGFwB,EAAmB,CACnBxH,WAAYyH,mBACZxB,WAAYwB,mBACZC,SAAUD,mBACVvB,QAASuB,oBAOTE,EAAsB,SAAAhE,GACtB6D,EAAiB7D,GAAK5B,QAAQ6F,SAI9BC,EAAkB,CAClB7H,WAAY,KACZiG,WAAY,KACZyB,SAAU,MAiBd,OACI,yBAAK5E,UAAU,WACX,kBAAC,EAAD,CACIpD,mBAzDa,SAAC,GAAqB,IAAnBF,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BK,EAAS,2BACFqB,GADC,kBAEH3B,EAAOC,GAAS6H,EAAa9H,OAuD1BsC,cAAe0F,EAAiBxH,WAChCyC,cAAe+E,EAAiBvB,WAChCvD,YAAa8E,EAAiBE,SAC9B9E,iBArBe,SAACkF,EAAQC,GAChCjI,EAAS,2BACFqB,GADC,IAEJ6E,kBAAmB6B,EAAgBE,OAmB/BlF,gBAfU,SAAAjD,GAClBE,EAAS,2BACFqB,GADC,IAEJ6E,kBAAmB,UAcf,kBAAC,EAAD,CACIhG,WAAYA,EACZiG,WAAYA,EACZ7E,UAAWA,EACXC,SAAUA,EACV6E,QAASA,EACTC,cAAeA,EACfH,kBAAmBA,EACnBI,mBA/CS,SAAAzC,GACrBgE,EAAoBhE,IA+CR7B,cAAe,SAAAM,GAAI,OACdyF,EAAe,WAAiBzF,GAErCK,cAAe,SAAAL,GAAI,OACdyF,EAAe,WAAiBzF,GAErCM,YAAa,SAAAN,GAAI,OAAKyF,EAAe,SAAezF,QCzFzD4F,MARf,WACI,OACI,yBAAKlF,UAAU,OACX,kBAAC,EAAD,QCHZmF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0b748f44.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const currentYear = new Date().getFullYear();\r\n        this.state = {\r\n            cardNumber: '',\r\n            cardMonth: '',\r\n            cardYear: '',\r\n            monthsArr: Array.from(new Array(12), (x, i) => {\r\n                const month = i + 1;\r\n                return month <= 9 ? '0' + month : month;\r\n            }),\r\n            yearsArr: Array.from(new Array(9), (x, i) => currentYear + i)\r\n        };\r\n    }\r\n\r\n    updateMainState = (name, value) => {\r\n        this.props.onUpdateStateValue({\r\n            name,\r\n            value\r\n        });\r\n    };\r\n\r\n    handleFormChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({ [name]: value });\r\n        this.updateMainState(name, value);\r\n    };\r\n\r\n    replaceMissingChars = cardNumber => {\r\n        let cardNumberTmp = '#### #### #### ####';\r\n        cardNumberTmp = cardNumberTmp.split('');\r\n        let cardNumberArr = cardNumber.split('');\r\n\r\n        let maskedCardNumber = [];\r\n        cardNumberTmp.forEach((val, index) => {\r\n            cardNumberArr[index]\r\n                ? maskedCardNumber.push(cardNumberArr[index])\r\n                : maskedCardNumber.push(val);\r\n        });\r\n\r\n        return maskedCardNumber.join('');\r\n    };\r\n\r\n    onCardNumberChange = event => {\r\n        let { value, name } = event.target;\r\n        let cardNumber = value;\r\n        value = value.replace(/\\D/g, '');\r\n        if (/^3[47]\\d{0,13}$/.test(value)) {\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\r\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\r\n            // diner's club, 14 digits\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\r\n        } else if (/^\\d{0,16}$/.test(value)) {\r\n            // regular cc number, 16 digits\r\n            cardNumber = value\r\n                .replace(/(\\d{4})/, '$1 ')\r\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\r\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\r\n        }\r\n\r\n        this.setState({ [name]: cardNumber.trimRight() });\r\n        this.updateMainState(name, cardNumber);\r\n    };\r\n\r\n    onCvvFocus = event => {\r\n        this.updateMainState('isCardFlipped', true);\r\n    };\r\n\r\n    onCvvBlur = event => {\r\n        this.updateMainState('isCardFlipped', false);\r\n    };\r\n\r\n    getSnapshotBeforeUpdate() {\r\n      return this.props.cardNumberRef.current.selectionStart;\r\n    }\r\n\r\n    /* Modifying the cardNumber input anywhere but the end of\r\n    the line causes the cursor to jump to the end. This is\r\n    because the value is reformatted with different spacing\r\n    (ie. react doesn't know what to do with the cursor for\r\n    changes between re-renders)\r\n\r\n    https://github.com/facebook/react/issues/955#issuecomment-150714427\r\n\r\n    This issue is fixed by manually repositioning the cursor\r\n    to account for any additional spacing that is added/removed\r\n    */\r\n    componentDidUpdate(prevProps, prevState, cursorIdx) {\r\n      const node = this.props.cardNumberRef.current;\r\n      const { cardNumber: cardNum } = this.state;\r\n      const { cardNumber: prevCardNum } = prevState;\r\n      if (\r\n        cardNum.length > prevCardNum.length &&\r\n        cardNum[cursorIdx - 1] === \" \"\r\n      ) {\r\n        cursorIdx += 1;\r\n      } else if (prevCardNum[cursorIdx - 1] === \" \") {\r\n        cursorIdx -= 1;\r\n      }\r\n      node.selectionStart = node.selectionEnd = cursorIdx;\r\n    }\r\n\r\n    render() {\r\n        const { cardMonth, cardYear, monthsArr, yearsArr } = this.state;\r\n        const {\r\n            cardNumberRef,\r\n            cardHolderRef,\r\n            cardDateRef,\r\n            cardCvvRef,\r\n            onCardInputFocus,\r\n            onCardInputBlur\r\n        } = this.props;\r\n        return (\r\n            <div className=\"card-form\">\r\n                <div className=\"card-list\">{this.props.children}</div>\r\n                <div className=\"card-form__inner\">\r\n                    <div className=\"card-input\">\r\n                        <label\r\n                            htmlFor=\"cardNumber\"\r\n                            className=\"card-input__label\"\r\n                        >\r\n                            Card Number\r\n                        </label>\r\n                        <input\r\n                            type=\"tel\"\r\n                            name=\"cardNumber\"\r\n                            className=\"card-input__input\"\r\n                            autoComplete=\"off\"\r\n                            onChange={this.onCardNumberChange}\r\n                            maxLength=\"19\"\r\n                            ref={cardNumberRef}\r\n                            onFocus={e => onCardInputFocus(e, 'cardNumber')}\r\n                            onBlur={onCardInputBlur}\r\n                            value={this.state.cardNumber}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"card-input\">\r\n                        <label htmlFor=\"cardName\" className=\"card-input__label\">\r\n                            Card Holder\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"card-input__input\"\r\n                            autoComplete=\"off\"\r\n                            name=\"cardHolder\"\r\n                            onChange={this.handleFormChange}\r\n                            ref={cardHolderRef}\r\n                            onFocus={e => onCardInputFocus(e, 'cardHolder')}\r\n                            onBlur={onCardInputBlur}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"card-form__row\">\r\n                        <div className=\"card-form__col\">\r\n                            <div className=\"card-form__group\">\r\n                                <label\r\n                                    htmlFor=\"cardMonth\"\r\n                                    className=\"card-input__label\"\r\n                                >\r\n                                    Expiration Date\r\n                                </label>\r\n                                <select\r\n                                    className=\"card-input__input -select\"\r\n                                    value={cardMonth}\r\n                                    name=\"cardMonth\"\r\n                                    onChange={this.handleFormChange}\r\n                                    ref={cardDateRef}\r\n                                    onFocus={e =>\r\n                                        onCardInputFocus(e, 'cardDate')\r\n                                    }\r\n                                    onBlur={onCardInputBlur}\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        Month\r\n                                    </option>\r\n\r\n                                    {monthsArr.map((val, index) => (\r\n                                        <option key={index} value={val}>\r\n                                            {val}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                                <select\r\n                                    name=\"cardYear\"\r\n                                    className=\"card-input__input -select\"\r\n                                    value={cardYear}\r\n                                    onChange={this.handleFormChange}\r\n                                    onFocus={e =>\r\n                                        onCardInputFocus(e, 'cardDate')\r\n                                    }\r\n                                    onBlur={onCardInputBlur}\r\n                                >\r\n                                    <option value=\"\" disabled>\r\n                                        Year\r\n                                    </option>\r\n\r\n                                    {yearsArr.map((val, index) => (\r\n                                        <option key={index} value={val}>\r\n                                            {val}\r\n                                        </option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"card-form__col -cvv\">\r\n                            <div className=\"card-input\">\r\n                                <label\r\n                                    htmlFor=\"cardCvv\"\r\n                                    className=\"card-input__label\"\r\n                                >\r\n                                    CVV\r\n                                </label>\r\n                                <input\r\n                                    type=\"tel\"\r\n                                    className=\"card-input__input\"\r\n                                    maxLength=\"4\"\r\n                                    autoComplete=\"off\"\r\n                                    name=\"cardCvv\"\r\n                                    onChange={this.handleFormChange}\r\n                                    onFocus={this.onCvvFocus}\r\n                                    onBlur={this.onCvvBlur}\r\n                                    ref={cardCvvRef}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CForm;\r\n","import React, { Component } from 'react';\r\nimport {\r\n    CSSTransition,\r\n    TransitionGroup,\r\n    SwitchTransition\r\n} from 'react-transition-group';\r\nimport './styles.scss';\r\n\r\nconst CARDS = {\r\n    visa: '^4',\r\n    amex: '^(34|37)',\r\n    mastercard: '^5[1-5]',\r\n    discover: '^6011',\r\n    unionpay: '^62',\r\n    troy: '^9792',\r\n};\r\n\r\nclass Card extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        const backgroundImgname = this.cardBackgroundName();\r\n        this.state = {\r\n            style: {},\r\n            counter: 0,\r\n            backgroundImgname: backgroundImgname\r\n        };\r\n    }\r\n\r\n    cardType = () => {\r\n        const number = this.props.cardNumber;\r\n        let re;\r\n        for (const [card, pattern] of Object.entries(CARDS)) {\r\n            re = new RegExp(pattern);\r\n            if (number.match(re) != null) {\r\n                return card;\r\n            }\r\n        }\r\n\r\n        return 'visa'; // default type\r\n    };\r\n\r\n    cardBackgroundName = () => {\r\n        let random = Math.floor(Math.random() * 25 + 1);\r\n        return `${random}.jpeg`;\r\n    };\r\n\r\n    removeEmptySpaces = cardNumber => {\r\n        return cardNumber.replace(/\\s+/g, '');\r\n    };\r\n\r\n    shouldMaskNumber = (cardNumber, index) => {\r\n        if (cardNumber.length === 15) {\r\n            return index > 4 && index < 12;\r\n        } else {\r\n            return index > 4 && index < 13;\r\n        }\r\n    };\r\n\r\n    outlineElementStyle = element => element\r\n        ? {\r\n            width: `${element.offsetWidth}px`,\r\n            height: `${element.offsetHeight}px`,\r\n            transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\r\n        }\r\n        : null;\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { currentFocusedElm } = this.props;\r\n        if (\r\n            currentFocusedElm &&\r\n            currentFocusedElm !== prevProps.currentFocusedElm\r\n        ) {\r\n            const style = this.outlineElementStyle(currentFocusedElm);\r\n            this.setState({ style });\r\n        }\r\n    }\r\n\r\n    maskCardNumber(cardNumber) {\r\n        let cardNumberArr = cardNumber.split('');\r\n        cardNumberArr.forEach((val, index) => {\r\n            if (index > 4 && index < 14) {\r\n                if (cardNumberArr[index] !== ' ') {\r\n                    cardNumberArr[index] = '*';\r\n                }\r\n            }\r\n        });\r\n\r\n        return cardNumberArr;\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            cardHolder,\r\n            cardNumber,\r\n            cardMonth,\r\n            cardYear,\r\n            cardCvv,\r\n            isCardFlipped,\r\n            currentFocusedElm,\r\n            onCardElementClick,\r\n            cardNumberRef,\r\n            cardHolderRef,\r\n            cardDateRef\r\n        } = this.props;\r\n\r\n        const cardHolderArr = cardHolder.split('');\r\n        const cardNumberArr = this.maskCardNumber(cardNumber);\r\n        cardCvv = cardCvv.split('');\r\n\r\n        return (\r\n            <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\r\n                <div className=\"card-item__side -front\">\r\n                    <div\r\n                        className={`card-item__focus ${\r\n                            currentFocusedElm ? `-active` : ``\r\n                        }`}\r\n                        style={this.state.style}\r\n                    />\r\n                    <div className=\"card-item__cover\">\r\n                        <img\r\n                            alt=\"\"\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                `/card-background/${this.state.backgroundImgname}`\r\n                            }\r\n                            className=\"card-item__bg\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"card-item__wrapper\">\r\n                        <div className=\"card-item__top\">\r\n                            <img\r\n                                src={process.env.PUBLIC_URL + '/chip.png'}\r\n                                alt=\"\"\r\n                                className=\"card-item__chip\"\r\n                            />\r\n                            <div className=\"card-item__type\">\r\n                                <img\r\n                                    alt={this.cardType()}\r\n                                    src={\r\n                                        process.env.PUBLIC_URL +\r\n                                        `/card-type/${this.cardType()}.png`\r\n                                    }\r\n                                    className=\"card-item__typeImg\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <label\r\n                            className=\"card-item__number\"\r\n                            ref={cardNumberRef}\r\n                            onClick={() => onCardElementClick('cardNumber')}\r\n                        >\r\n                            <TransitionGroup\r\n                                className=\"slide-fade-up\"\r\n                                component=\"div\"\r\n                            >\r\n                                {cardNumber ? (\r\n                                    cardNumberArr.map((val, index) => (\r\n                                        <CSSTransition\r\n                                            classNames=\"slide-fade-up\"\r\n                                            timeout={250}\r\n                                            key={index}\r\n                                        >\r\n                                            <div className=\"card-item__numberItem\">\r\n                                                {val}\r\n                                            </div>\r\n                                        </CSSTransition>\r\n                                    ))\r\n                                ) : (\r\n                                    <CSSTransition\r\n                                        classNames=\"slide-fade-up\"\r\n                                        timeout={250}\r\n                                    >\r\n                                        <div className=\"card-item__numberItem\">\r\n                                            #\r\n                                        </div>\r\n                                    </CSSTransition>\r\n                                )}\r\n                            </TransitionGroup>\r\n                        </label>\r\n                        <div className=\"card-item__content\">\r\n                            <label\r\n                                className=\"card-item__info\"\r\n                                onClick={() => onCardElementClick('cardHolder')}\r\n                                ref={cardHolderRef}\r\n                            >\r\n                                <div className=\"card-item__holder\">\r\n                                    Card Holder\r\n                                </div>\r\n                                <div className=\"card-item__name\">\r\n                                    <TransitionGroup\r\n                                        className=\"slide-fade-up\"\r\n                                        component=\"div\"\r\n                                    >\r\n                                        {cardHolder === 'FULL NAME' ? (\r\n                                            <CSSTransition\r\n                                                classNames=\"slide-fade-up\"\r\n                                                timeout={250}\r\n                                            >\r\n                                                <div>FULL NAME</div>\r\n                                            </CSSTransition>\r\n                                        ) : (\r\n                                            cardHolderArr.map((val, index) => (\r\n                                                <CSSTransition\r\n                                                    timeout={250}\r\n                                                    classNames=\"slide-fade-right\"\r\n                                                    key={index}\r\n                                                >\r\n                                                    <span className=\"card-item__nameItem\">\r\n                                                        {val}\r\n                                                    </span>\r\n                                                </CSSTransition>\r\n                                            ))\r\n                                        )}\r\n                                    </TransitionGroup>\r\n                                </div>\r\n                            </label>\r\n                            <div\r\n                                className=\"card-item__date\"\r\n                                onClick={() => onCardElementClick('cardDate')}\r\n                                ref={cardDateRef}\r\n                            >\r\n                                <label className=\"card-item__dateTitle\">\r\n                                    Expires\r\n                                </label>\r\n                                <label className=\"card-item__dateItem\">\r\n                                    <SwitchTransition in-out>\r\n                                        {!cardMonth ? (\r\n                                            <CSSTransition\r\n                                                classNames=\"slide-fade-up\"\r\n                                                timeout={250}\r\n                                                key={cardMonth}\r\n                                            >\r\n                                                <span>MM</span>\r\n                                            </CSSTransition>\r\n                                        ) : (\r\n                                            <CSSTransition\r\n                                                classNames=\"slide-fade-up\"\r\n                                                timeout={250}\r\n                                                key={cardMonth}\r\n                                            >\r\n                                                <span>{cardMonth}</span>\r\n                                            </CSSTransition>\r\n                                        )}\r\n                                    </SwitchTransition>\r\n                                </label>\r\n                                /\r\n                                <label\r\n                                    htmlFor=\"cardYear\"\r\n                                    className=\"card-item__dateItem\"\r\n                                >\r\n                                    <SwitchTransition out-in>\r\n                                        {!cardYear ? (\r\n                                            <CSSTransition\r\n                                                classNames=\"slide-fade-up\"\r\n                                                timeout={250}\r\n                                                key={cardYear}\r\n                                            >\r\n                                                <span>YY</span>\r\n                                            </CSSTransition>\r\n                                        ) : (\r\n                                            <CSSTransition\r\n                                                classNames=\"slide-fade-up\"\r\n                                                timeout={250}\r\n                                                key={cardYear}\r\n                                            >\r\n                                                <span>\r\n                                                    {cardYear\r\n                                                        .toString()\r\n                                                        .substr(-2)}\r\n                                                </span>\r\n                                            </CSSTransition>\r\n                                        )}\r\n                                    </SwitchTransition>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card-item__side -back\">\r\n                    <div className=\"card-item__cover\">\r\n                        <img\r\n                            alt=\"\"\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                `/card-background/${this.state.backgroundImgname}`\r\n                            }\r\n                            className=\"card-item__bg\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"card-item__band\"/>\r\n                    <div className=\"card-item__cvv\">\r\n                        <div className=\"card-item__cvvTitle\">CVV</div>\r\n                        <div className=\"card-item__cvvBand\">\r\n                            {cardCvv.map((val, index) => (\r\n                                <span key={index}>*</span>\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"card-item__type\">\r\n                            <img\r\n                                alt=\"card-type\"\r\n                                src={\r\n                                    process.env.PUBLIC_URL +\r\n                                    '/card-type/visa.png'\r\n                                }\r\n                                className=\"card-item__typeImg\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useRef } from 'react';\r\nimport CForm from './components/form';\r\nimport Card from './components/card';\r\n\r\nconst defaultCardNo = '#### #### #### ####';\r\nconst defaultCardHolderName = 'FULL NAME';\r\nconst defaultCardMonth = '';\r\nconst defaultCardYear = '';\r\nconst defaultCardCvv = '';\r\n\r\nconst MainScreen = () => {\r\n    const initialState = {\r\n        cardNumber: defaultCardNo,\r\n        cardHolder: defaultCardHolderName,\r\n        cardMonth: defaultCardMonth,\r\n        cardYear: defaultCardYear,\r\n        cardCvv: defaultCardCvv,\r\n        isCardFlipped: false,\r\n        currentFocusedElm: null\r\n    };\r\n    const [state, setState] = useState(initialState);\r\n\r\n    const updateStateValue = ({ name, value }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value || initialState[name]\r\n        });\r\n    };\r\n\r\n    const {\r\n        cardNumber,\r\n        cardHolder,\r\n        cardMonth,\r\n        cardYear,\r\n        cardCvv,\r\n        isCardFlipped\r\n    } = state;\r\n    let { currentFocusedElm } = state;\r\n\r\n    // References for the Form Inputs\r\n    let formFieldsRefObj = {\r\n        cardNumber: useRef(),\r\n        cardHolder: useRef(),\r\n        cardDate: useRef(),\r\n        cardCvv: useRef()\r\n    };\r\n\r\n    let onCardElementClick = key => {\r\n        focusFormFieldByKey(key);\r\n    };\r\n\r\n    let focusFormFieldByKey = key => {\r\n        formFieldsRefObj[key].current.focus();\r\n    };\r\n\r\n    // This are the references for the Card DIV elements\r\n    let cardElementsRef = {\r\n        cardNumber: null,\r\n        cardHolder: null,\r\n        cardDate: null\r\n    };\r\n\r\n    let onCardFormInputFocus = (_event, inputName) => {\r\n        setState({\r\n            ...state,\r\n            currentFocusedElm: cardElementsRef[inputName]\r\n        });\r\n    };\r\n\r\n    let onCardInputBlur = event => {\r\n        setState({\r\n            ...state,\r\n            currentFocusedElm: null\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <CForm\r\n                onUpdateStateValue={updateStateValue}\r\n                cardNumberRef={formFieldsRefObj.cardNumber}\r\n                cardHolderRef={formFieldsRefObj.cardHolder}\r\n                cardDateRef={formFieldsRefObj.cardDate}\r\n                onCardInputFocus={onCardFormInputFocus}\r\n                onCardInputBlur={onCardInputBlur}\r\n            >\r\n                <Card\r\n                    cardNumber={cardNumber}\r\n                    cardHolder={cardHolder}\r\n                    cardMonth={cardMonth}\r\n                    cardYear={cardYear}\r\n                    cardCvv={cardCvv}\r\n                    isCardFlipped={isCardFlipped}\r\n                    currentFocusedElm={currentFocusedElm}\r\n                    onCardElementClick={onCardElementClick}\r\n                    cardNumberRef={node =>\r\n                        (cardElementsRef['cardNumber'] = node)\r\n                    }\r\n                    cardHolderRef={node =>\r\n                        (cardElementsRef['cardHolder'] = node)\r\n                    }\r\n                    cardDateRef={node => (cardElementsRef['cardDate'] = node)}\r\n                ></Card>\r\n            </CForm>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainScreen;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport MainScreen from './screens/MainScreen';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <MainScreen />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}